"VERSION:","1.0"
"OUTERJOIN:","Yes"
"UNIONSORT:","No"
"DISTINCT:","No"
"QUOTECSV:","No"
"CTMISSJOIN:","No"
"EMPTYNULL:","No"
"TERMINAL:","Yes"
"OUTENABLED:","Yes"
"INLINE_VIEW:",""
"LASTPACKEDEXE:","TCB_Die_drop_mismatch\TCB_feed_one_die_record.exe"
"EXCEL:","out_7524.tab"
"ROW:","No"
"EMBED:","Y"
"INCNESTUTIL:","N"
"QUERYROWS:","0"
"JOINROWS:","0"
"FILTERROWS:","0"
"COL_ID_COUNTER:","0"
"CHART_COUNTER:","0"
"PIVOTMODE:","0"
"SQLITESPECIALHDRS:","1"
"LEGACYPIVOTHDRS:","0"
"USEPYENGINE:","Y"
"GLOBALS_FILE:",""
"GLOBAL_VARS:","-1"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Write-File:YTCB_feed_one_die_record.py<SOF><{><}>import pandas as pd<{><}>import csv<{><}>import os<{><}>import re<{><}>import datetime<{><}><{><}># developed by Wenkaihu, 2022/06<{><}><{><}># regular express set as logre for match log file.<{><}>logre = <~>^TCB\d+OpLog\d+.{1,}log<~><{><}><{><}># Primary Address for remote folder. contains all links sub folders.<{><}>root = r<~>\\t7filer04\toollog\Logs\A48\TCB-OpLog<~><{><}>rootDir = r<~>defined<~><{><}># define for single log file reading and Specify Data extract<{><}><{><}>writeinrows = pd.DataFrame()<{><}>nowtime = datetime.datetime.now()<{><}># print(nowtime.timestamp())<{><}># only extract data from recent 10 days, will release more server time<{><}>comparetime = datetime.datetime.now() - datetime.timedelta(days=10)<{><}># print(comparetime)<{><}><{><}># this is for reading file specific content<{><}>def extract(logfile, rootDir, filename):<{><}>    global writeinrows<{><}>    ff = open(logfile, encoding=<~>gb18030<~>, errors=<~>ignore<~>)<{><}>    dataset = pd.read_csv(ff, sep='\t', )<{><}>    # select content aligned with <~>XX<~><{><}>    die_drop_data = dataset[dataset['Title'] == 'Feed One Die']<{><}><{><}>    # seek for entity info from file path<{><}>    link = re.findall(r'(?<=\\)\w{6}$', rootDir)<{><}>    # print(link)<{><}>    die_drop_data.insert(loc=10, column='entity', value=link[0])<{><}><{><}>    # seek for bonder info from file path<{><}>    link = re.findall(r'(?<=TCB)\d(?=OpLog)', filename)<{><}>    # print(link)<{><}>    die_drop_data.insert(loc=11, column='Bonder', value=link[0])<{><}><{><}>    # print(die_drop_data)<{><}>    mid = pd.concat([writeinrows, die_drop_data], ignore_index=True)<{><}>    writeinrows = mid<{><}><{><}><{><}># Traversal of all files and calls the function.<{><}>def listDir(rootDir):<{><}>    for filename in os.listdir(rootDir):<{><}>        pathname = os.path.join(rootDir, filename)<{><}>        if os.path.isfile(pathname):<{><}>            # print(re.findall(r'^TCB\d+OpLog\d+.{1,}log',filename))<{><}>            oplog = re.findall(r'^TCB\d+OpLog\d+.+log', filename)<{><}><{><}>            # only read the file in a fixed name<{><}>            if oplog:<{><}>                filetime = os.path.getmtime(pathname)<{><}>                # only read files created less than X days, will save more running time<{><}>                if filetime > comparetime.timestamp():<{><}>                    # comparetime.timestamp():<{><}>                    # print(filetime)<{><}>                    extract(pathname, rootDir, filename)<{><}>        else:<{><}>            listDir(pathname)<{><}><{><}><{><}>listDir(root)<{><}>print(writeinrows)<{><}><{><}># create file and write in header<{><}>f = open('TCB_feed_one_die_record.csv', 'w', newline='')<{><}>csv_writer = csv.writer(f)<{><}><{><}>writeinrows.to_csv('TCB_feed_one_die_record.csv', mode='a', index=False, header=True)<{><}><{><}>"
"UTILITIESDESC:","Write Text to a file. Optionally use <EOF> to mark end of file"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Python:Y@EXEDIR@\Run_Python_Script.va <~>TCB_feed_one_die_record.py<~> <~><~> <~>N<~> <~><<<SPF-APP-SERVER>>><~> <~>Python-v3<~>"
"UTILITIESDESC:","Run Python script"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Pre/Post Query:Y{TCB_loss_raw}</@#;>TCB_loss_raw"
"UTILITIESDESC:","Pre/Post Query"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Pre/Post Query:Y"
"UTILITIESDESC:","Pre/Post Query"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Pre/Post Query:Y"
"UTILITIESDESC:","Pre/Post Query"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Pre/Post Query:Y"
"UTILITIESDESC:","Pre/Post Query"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Pre/Post Query:Y"
"UTILITIESDESC:","Pre/Post Query"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Pre/Post Query:Y"
"UTILITIESDESC:","Pre/Post Query"
"<---- New Query ---->","5:3:UTILITIES"
"UTILITIES:","U->Pre/Post Query:Y"
"UTILITIESDESC:","Pre/Post Query"
"<---- New Query ---->","-99"
"QUERYGRID:"
"JOINGRID:"
"FILTERGRID:"
/START_EMBED_ALL
/EMBED=VG2;TCB_loss_raw
"VERSION:","1.0"
"OUTERJOIN:","Yes"
"UNIONSORT:","No"
"DISTINCT:","No"
"QUOTECSV:","No"
"CTMISSJOIN:","No"
"EMPTYNULL:","No"
"TERMINAL:","Yes"
"OUTENABLED:","Yes"
"INLINE_VIEW:",""
"LASTPACKEDEXE:",""
"EXCEL:","out_7524.tab"
"ROW:","No"
"EMBED:","Y"
"INCNESTUTIL:","N"
"QUERYROWS:","11"
"JOINROWS:","0"
"FILTERROWS:","2"
"COL_ID_COUNTER:","14"
"CHART_COUNTER:","0"
"PIVOTMODE:","0"
"SQLITESPECIALHDRS:","1"
"LEGACYPIVOTHDRS:","0"
"USEPYENGINE:","Y"
"GLOBALS_FILE:",""
"GLOBAL_VARS:","-1"
"<---- New Query ---->","2:0:a0"
"TABLEGRID:","1"
"","F_Lot_History_v3",""
"MARSNODE:","Default"
"ARIESNODE:","Default"
"OASYSNODE:","Default"
"ARIESCLASSNODE:","ATD.ARIES"
"OTHERNODE:","Default"
"MARSSCHEMA:","Default"
"DATABASETYPE:","Oracle"
"SINGLENODE:","Default"
"SINGLESCHEMA:","Default"
"PROMPT-TEXT:","Fetching MARS Data"
"DISTINCT:","No"
"ROW:","No"
"EXCEL:","No"
"CT_MISS_VAL:","No"
"FIRST_ROWS:","No"
"ORDERED:","No"
"OTHER-HINT:","No"
"<---- New Query ---->","-99"
"QUERYGRID:"
"a0.lot","lot","Y","None","None","Row","c","Identifies a batch of wafers or units being processed in the factory.The basic format of the Lot number is: ?FYWWNNNN where F=fab code, Y=year, WW=workweek, NNNN= sequence, with the 9th or 10th characters as alphanumeric. In Fab, Etest and Sort, a quantity that has a wafer as an unit of measure and the physical form that passes through the factory. A lot starting the Fab process contains up to 25 wafers and can be split into child lots of varying sizes, and wafer losses can also occur. New lots are also created to split lots due to varying characteristics, such as speed or rework, for a portion of the lot. In some 200mm fabs production lots, the lot number uses a silicon vendor ID in the 8th character","f_lothist","a0->f0.lot","col1"
"a0.operation","operation","Y","None","None","Row","c","Identifies a manufacturing process step or a holding point","f_lothist","a0->f0.operation","col2"
"a0.out_date","out_date","Y","None","None","Row","d","The date the lot moved out of the operation. If the lot has not moved out, the value will be NULL. This column is used in date indices instead of Last_Action_Date as Last_Action_Date changes for every transaction for the lot at the operation.","f_lothist","a0->f0.out_date","col3"
"a0.code","code","Y","None","None","Row","c","Bonus, loss, rework code or bin code. E.g., Code 0405 of CODE_TYPE ?L? (Loss Code) may refer to a broken or chipped wafer","f_lotcodehist","a0->f2.code","col8"
"a0.code_type","code_type","Y","None","None","Row","c","The type of code being described. E.g., ?Local Rework (R), External rework (W), Bonus (B), Loss (L), Main bin in Test (M), Save bin in test (S). ?As noted, there are two types of rework. Local rework is work performed on units whose initial processing was inadequate; the lot does not leave the current operation. External rework refers to additional processing at different operations.","f_lotcodehist","a0->f2.code_type","col6"
"a0.codeqty","codeqty","Y","None","None","Row","n","The number of wafers or units associated with a loss, bonus, rework or bin code identifier.","f_lotcodehist","a0->f2.codeqty","col7"
"a0.transaction","transaction","Y","None","None","Row","c","A transaction identifier. E.g., HLLT, RLLT","f_lottxnhist","a0->f5.transaction","col9"
"a0.txn_date","txn_date","Y","None","None","Row","d","The date and time a transaction occurred.","f_lottxnhist","a0->f5.txn_date","col10"
"a0.entity","entity","Y","None","None","Row","c","Typically identifies a piece of equipment though in some FACILITIES it might be a reticle ID. E.g., VDF027 might be the identifier for a diffusion tube at a GATE OXIDE operation.","f_entitylothist","a0->f4.entity","col12"
"a0.code_description","code_description","Y","None","None","Row","x","The description of a loss bonus rework or bin code","f_opercode","a0->oc0.code_description","col13"
"a0.route","route","Y","None","None","Row","c","An identifier for a sequence of operations in a WorkStream facility. ?This contains full route names, including snippet routes. ?Views are used to view only the base route name (first 10 characters). ?Snippet routes have _SNIP_ starting in the 11th character and followed by the lotplan name. ?For Engring use primarily. ?A sample general route name is as follows: FL64.0ABCD, ?where FL = Route Type, 64 is the process, .0 is the dot process, and ABCD is a four character extension. A sample Test Wafer route name is: ?TWLC64.001, where TW is the Test Wafer Route type (in this case just Test Wafer as opposed to say Regen), L indicates Litho, C indicates Copper, 64 indicates the process, and 001 is a 3 character extension.","f_lothist","a0->f0.route","col14"
"JOINGRID:"
"FILTERGRID:"
"AND","","a0.operation","=","'1204'","","","c","f_lothist","a0->f0.operation",""
"AND","","a0.txn_date",">=","TRUNC(SYSDATE) - 14","",".","d","f_lottxnhist","a0->f5.txn_date",""



/END_EMBED
/END_EMBED_ALL
